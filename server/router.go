package server

import (
	"fmt"
	"net/http"

	"github.com/gorilla/handlers"
	"github.com/gorilla/mux"
	"github.com/spf13/viper"
)

const (
	// APIVersion defines the compatability version of the API and is appended to each API route
	APIVersion     = "1"
	endpointFormat = "/api/v%s/%s"
)

// getEndpoint returns a properly formatted API endpoint
func getEndpoint(suffix string) string {
	return fmt.Sprintf(endpointFormat, APIVersion, suffix)
}

// Route defines a route passed to our mux
type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

// Routes holds a list of Routes
type Routes []Route

// all defined server endpoints
var routes = Routes{

	// API endpoints
	Route{
		"Version",
		"GET",
		getEndpoint("version"),
		handlerVersion,
	},

	Route{
		"Authorize",
		"GET",
		getEndpoint("authorize"),
		handlerAuthorize,
	},

	Route{
		"Challenge",
		"POST",
		getEndpoint("challenge"),
		handlerChallenge,
	},

	Route{
		"UserAdd",
		"POST",
		getEndpoint("user"),
		handlerClientAdd,
	},

	Route{
		"UserModify",
		"PUT",
		getEndpoint("user/{user-id}"),
		handlerClientModify,
	},

	Route{
		"UserRemove",
		"DELETE",
		getEndpoint("user/{user-id}"),
		handlerClientDelete,
	},

	Route{
		"UserGet",
		"GET",
		getEndpoint("user/{user-id}"),
		handlerGetUser,
	},
}

func newRouter() *mux.Router {

	router := mux.NewRouter().StrictSlash(true)
	for _, route := range routes {

		// add compression support to handler if enabled
		var handler http.Handler
		handler = route.HandlerFunc
		if viper.GetBool("server.compression") {
			handler = handlers.CompressHandler(route.HandlerFunc)
		}

		// add routes to mux
		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	// add route to mux to handle frontend UI static files (generated by npm)
	staticPath := viper.GetString("server.static_files_dir")
	if staticPath == "" {
		staticPath = "./frondent/dist"
	}

	handlerStatic := http.StripPrefix("/", http.FileServer(http.Dir(staticPath)))
	// add compression support to handler if enabled
	if viper.GetBool("server.compression") {
		handlerStatic = handlers.CompressHandler(handlerStatic)
	}

	router.
		Methods("GET").
		PathPrefix("/").
		Handler(handlerStatic)

	return router
}
