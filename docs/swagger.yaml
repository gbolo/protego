basePath: /api/v1
definitions:
  server.addUser:
    properties:
      acl_allow_all:
        description: Determines if this User is allowed to access ALL resources
        example: false
        type: boolean
      acl_allowed_hosts:
        description: A list of hosts (FQDN) this User is allowed to access
        example:
        - git.example.com
        - wiki.example.com
        items:
          type: string
        type: array
      description:
        description: A brief description of this User
        example: Cloud Strife
        type: string
      dns_names:
        description: A list of DNS names that resolve this User's IPs which get whitelisted
          automatically without a challenge.
        example:
        - myhome.no-ip.info
        items:
          type: string
        type: array
      enabled:
        description: Determines if this User is enabled
        example: true
        type: boolean
      secret:
        description: This secret is used as a challenge to whitelist a User's IP
        example: supersecret
        type: string
      ttl_minutes:
        description: Represents the number of minutes this User's IP is whitelisted
          for after a successful challenge
        example: 60
        type: integer
    type: object
  server.getUser:
    properties:
      acl_allow_all:
        description: Determines if this User is allowed to access ALL resources
        example: false
        type: boolean
      acl_allowed_hosts:
        description: A list of hosts (FQDN) this User is allowed to access
        example:
        - git.example.com
        - wiki.example.com
        items:
          type: string
        type: array
      description:
        description: A brief description of this User
        example: Cloud Strife
        type: string
      dns_names:
        description: A list of DNS names that resolve this User's IPs which get whitelisted
          automatically without a challenge.
        example:
        - myhome.no-ip.info
        items:
          type: string
        type: array
      enabled:
        description: Determines if this User is enabled
        example: true
        type: boolean
      id:
        description: A unique identifier for this User
        example: 5e8848
        type: string
      ttl_minutes:
        description: Represents the number of minutes this User's IP is whitelisted
          for after a successful challenge
        example: 60
        type: integer
    type: object
  server.modifyUser:
    properties:
      acl_allow_all:
        description: Determines if this User is allowed to access ALL resources
        example: false
        type: boolean
      acl_allowed_hosts:
        description: A list of hosts (FQDN) this User is allowed to access
        example:
        - git.example.com
        - wiki.example.com
        items:
          type: string
        type: array
      description:
        description: A brief description of this User
        example: Cloud Strife
        type: string
      dns_names:
        description: A list of DNS names that resolve this User's IPs which get whitelisted
          automatically without a challenge.
        example:
        - myhome.no-ip.info
        items:
          type: string
        type: array
      enabled:
        description: Determines if this User is enabled
        example: true
        type: boolean
      ttl_minutes:
        description: Represents the number of minutes this User's IP is whitelisted
          for after a successful challenge
        example: 60
        type: integer
    type: object
  server.version:
    properties:
      build_ref:
        example: git-30b8019
        type: string
      version:
        example: v1.0
        type: string
    type: object
info:
  contact:
    email: gbolo@linuxctl.com
    name: API Support
  description: Swagger API for Protego - https://github.com/gbolo/protego
  license:
    name: MIT
    url: https://github.com/gbolo/protego/blob/master/LICENSE
  termsOfService: http://swagger.io/terms/
  title: Protego - REST API
  version: "1.0"
paths:
  /authorize:
    get:
      description: Configure NGINX auth_request to this endpoint
      parameters:
      - description: IP address of the user
        in: header
        name: X-Real-IP
        required: true
        type: string
      - description: the host (FQDN) the user is making a request to
        in: header
        name: Host
        type: string
      responses:
        "200":
          description: access granted
        "401":
          description: unauthorized - user IP is unknown or not permitted to access
            this host
      summary: NGINX auth_request destination
      tags:
      - Authorization
  /challenge:
    post:
      description: A user must successfully POST to this URL in order for their IP
        address to be granted access
      parameters:
      - description: IP address of the user
        in: header
        name: X-Real-IP
        required: true
        type: string
      - description: Secret that was given to/by the user
        in: header
        name: User-Secret
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'challenge was accepted: the value of X-Real-IP has been granted
            an ACL'
        "400":
          description: 'bad request: X-Real-IP is not set'
        "401":
          description: 'unauthorized: the user secret is incorrect or the user is
            disabled'
        "500":
          description: server could not process the request
      summary: Challenge used to authorize an IP address for access
      tags:
      - Authorization
  /user:
    get:
      description: get all Users
      parameters:
      - description: Admin Secret
        in: header
        name: Admin-Secret
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/server.getUser'
            type: array
      summary: Retrieve all Users
      tags:
      - User
    post:
      consumes:
      - application/json
      description: add by json user
      parameters:
      - description: Admin Secret
        in: header
        name: Admin-Secret
        required: true
        type: string
      - description: Add User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/server.addUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.getUser'
      summary: Add a new User
      tags:
      - User
  /user/{id}:
    delete:
      description: remove a User by ID
      parameters:
      - description: Admin Secret
        in: header
        name: Admin-Secret
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.getUser'
      summary: Remove a User based on provided ID
      tags:
      - User
    get:
      description: get User by ID
      parameters:
      - description: Admin Secret
        in: header
        name: Admin-Secret
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.getUser'
      summary: Retrieve a User based on provided ID
      tags:
      - User
    put:
      consumes:
      - application/json
      description: update by json user
      parameters:
      - description: Admin Secret
        in: header
        name: Admin-Secret
        required: true
        type: string
      - description: Update User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/server.modifyUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.getUser'
      summary: Update an existing User
      tags:
      - User
  /version:
    get:
      description: Retrieve the version information of this Protego server
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.version'
      summary: Version information
      tags:
      - Version
swagger: "2.0"
